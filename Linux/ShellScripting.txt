Shell Scripting:
----------------

My First Shell Script"
-----------------------
	fuzz@pizza:~/shellScripts/newAtScripting$ touch greet.sh
	fuzz@pizza:~/shellScripts/newAtScripting$ chmod +x greet.sh
	fuzz@pizza:~/shellScripts/newAtScripting$ ls -l
	total 0
	-rwxrwxr-x 1 fuzz fuzz 0 Sep 25 16:11 greet.sh
	fuzz@pizza:~/shellScripts/newAtScripting$ vi greet.sh

		# This script accepts the user\'s name and prints 
		# a message greeting the user
		# Print the prompt message on screen
		echo -n "Enter your name :"	  	
		# Wait for user to enter a name, and save the entered name into the variable \'name\'
		read name				
		# Print the welcome message followed by the name	
		echo "Welcome $name"
		# The following message should print on a single line. Hence the usage of \'-n\'
		echo -n "Congratulations! You just created and ran your first shell script "
		echo "using Bash on IBM Skills Network"
	
	fuzz@pizza:~/shellScripts/newAtScripting$ ./greet.sh
	Enter your name :Faraz
	Welcome Faraz
	Congratulations! You just created and ran your first shell script using Bash on IBM Skills Network
	fuzz@pizza:~/shellScripts/newAtScripting$
	
	
	
Exercise 2 - Using a shebang line:
-----------------------------------
	In this exercise, you will edit the greet.sh script you created in the previous exercise by adding a 'shebang' and making it an executable file.

	This is done to ensure that the name of the script can be used like a command. Adding this special shebang line lets you specify the path to the interpreter of the script - in this case, the Bash shell.

	Follow the steps below to learn how to add a shebang to your script.

Find the path to the interpreter:
---------------------------------
	The which command helps you find out the path of the command bash.
	which bash
		fuzz@pizza:~/shellScripts/newAtScripting$ which bash
		/usr/bin/bash
	In this case, it returns the path /bin/bash.

Edit the script greet.sh and add the shebang line to the script:
------------------------------------------------------------------
	Open the file and add the following line at the beginning of the script:
	#! /bin/bash

	The script should now look like the following:

	Script with the shebang line that you added

Check the permissions of the script:
-------------------------------------
	One more step needs to be completed to make greet.sh completely executable by name.

	To add the execute permission for the user on greet.sh, enter the following:

	chmod +x greet.sh

	Verify whether the execute permission is granted.

	Tip: Generally it's not a good idea to grant permissions to a script for all users, groups, and others. It's more appropriate to limit the execute permission to only the owner, or the user who created the file (you).

	To change permissions for greet.sh to make the file executable for the user, run the command below:

	chmod u+x greet.sh

	Verify the permissions using the command below:
	
	ls -l greet.sh

	If you wish to grant execute permission to everyone, you need to run the command chmod +x greet.sh.

Execute the script:
--------------------
	Enter the command given below to run the shell script.

	./greet.sh

	The . here refers to the current directory. You are telling Linux to execute the script greet.sh and that it can be found in the current directory.
	
	fuzz@pizza:~/shellScripts/newAtScripting$ ./welcomeScript.sh
	Enter your name: Faraz Nadeem Siddiqi
	Welcome Faraz Nadeem Siddiqi:
	fuzz@pizza:~/shellScripts/newAtScripting$
	
Transformations:
-----------------
	$ echo "Linux and shell scripting are awesome\!" | tr "aeiou" "_"
	L_n_x _nd sh_ll scr_pt_ng _r_ _w_s_m_!

		fuzz@pizza:~/shellScripts/newAtScripting$ echo "My name is Faraz Nadeem Siqqiqi" | tr "F" "s"
		My name is saraz Nadeem Siqqiqi
	
	
	sort pets.txt | uniq | tr "[a-z]" "[A-Z]"
	
		fuzz@pizza:~/shellScripts/newAtScripting$ cat pets
		goldfish
		dog
		cat
		parrot
		dog
		goldfish
		goldfish
		fuzz@pizza:~/shellScripts/newAtScripting$ cat pets | tr [a-z] [A-Z]
		GOLDFISH
		DOG
		CAT
		PARROT
		DOG
		GOLDFISH
		GOLDFISH
		fuzz@pizza:~/shellScripts/newAtScripting$ cat pets | sort
		cat
		dog
		dog
		goldfish
		goldfish
		goldfish
		parrot
		fuzz@pizza:~/shellScripts/newAtScripting$ cat pets | sort  -r
		parrot
		goldfish
		goldfish
		goldfish
		dog
		dog
		cat
		fuzz@pizza:~/shellScripts/newAtScripting$ cat pets | sort  -r | uniq
		parrot
		goldfish
		dog
		cat
		fuzz@pizza:~/shellScripts/newAtScripting$ cat pets | sort  -r | uniq | tr [a-z] [A-Z]
		PARROT
		GOLDFISH
		DOG
		CAT
		fuzz@pizza:~/shellScripts/newAtScripting$
	
Extracting information from URLs:
----------------------------------
	You can also use curl in combination with the grep command to extract components of URL data by piping the output of curl to grep.

	Let's see how you can use this pattern to get the current price of Bitcoin (BTC) in USD.

	First, find a public URL API. In this example, you will use one provided by CoinStats.

	CoinStats provides a public API with no key required at https://api.coinstats.app/public/v1/coins/bitcoin\?currency\=USD, which returns some JSON about the current BTC price in USD.

	You can see what this looks like by entering the above link in your browser.

	Entering the following command returns the BTC price data, displayed as a JSON object:

	$ curl -s --location --request GET https://api.coinstats.app/public/v1/coins/bitcoin\?currency\=USD
	{
	  "coin": {
		"id": "bitcoin",
		"icon": "https://static.coinstats.app/coins/Bitcoin6l39t.png",
		"name": "Bitcoin",
		"symbol": "BTC",
		"rank": 1,
		"price": 57907.78008618953,
		"priceBtc": 1,
		"volume": 48430621052.9856,
		"marketCap": 1093175428640.1146,
		"availableSupply": 18877868,
		"totalSupply": 21000000,
		"priceChange1h": -0.19,
		"priceChange1d": -0.4,
		"priceChange1w": -9.36,
		"websiteUrl": "http://www.bitcoin.org",
		"twitterUrl": "https://twitter.com/bitcoin",
		"exp": [
		  "https://blockchair.com/bitcoin/",
		  "https://btc.com/",
		  "https://btc.tokenview.com/"
		]
	  }
	}
	
	Note: For the purpose of this reading, we've reformatted the output to make it easier to interpret. The actual output is a continuous stream of text.

	The JSON field you want to grab here is "price": [numbers].[numbers]". To get this, you can use the following grep command to extract it from the JSON text:

	grep -oE "\"price\"\s*:\s*[0-9]*?\.[0-9]*"
	
	Let's break down the details of this statement:

	-o tells grep to only return the matching portion
	-E tells grep to be able to use extended regex symbols such as ?
	\"price\" matches the string "price"
	\s* matches any number (including 0) of whitespace (\s) characters
	: matches :
	[0-9]* matches any number of digits (from 0 to 9)
	?\. optionally matches a .
	Now that you have the grep statement that you need, you can pipe the BTC data to it using the curl command from above:

	$ curl -s --location --request GET https://api.coinstats.app/public/v1/coins/bitcoin\?currency\=USD |\
		grep -oE "\"price\":\s*[0-9]*?\.[0-9]*"
	"price": 57907.78008618953
	
	Tip: The backslash \ character used here after the pipe | allows you to write the expression on multiple lines.

	Finally, to get only the value in the price field and drop the "price" label, you can use chaining to pipe the same output to another grep:


	$ curl -s --location --request GET https://api.coinstats.app/public/v1/coins/bitcoin\?currency\=USD |\
		grep -oE "\"price\":\s*[0-9]*?\.[0-9]*" |\
		grep -oE "[0-9]*?\.[0-9]*"
	57907.78008618953
	
	This now displays only the numerical price without the label.
		
	Get BitCoin Price:
	-------------------
	curl -s --location --request GET https://api.coinstats.app/public/v1/coins/bitcoin\?currency\=USD | grep -o '"price":[^,]*'

Learning Objectives
-------------------
	After completing this reading, you will be able to:

	1. List examples of metacharacters
	2. Use quoting to specify literal or special character meanings
	3. Implement input and output redirection
	4. Apply command substitution
	5. Describe applications for command line arguments
	6. Metacharacters
	7. Metacharacters are characters having special meaning that the shell interprets as instructions.

	Metacharacter	Meaning
				#	Precedes a comment
				;	Command separator
				*	Filename expansion wildcard
				?	Single character wildcard in filename expansion
		
	Pound #:
	--------
	The pound # metacharacter is used to represent comments in shell scripts or configuration files. Any text that appears after a # on a line is treated as a comment and is ignored by the shell.
		#!/bin/bash
		# This is a comment
		echo "Hello, world!"  # This is another comment
	Comments are useful for documenting your code or configuration files, providing context, and explaining the purpose of the code to other developers who may read it. It's a best practice to include comments in your code or configuration files wherever necessary to make them more readable and maintainable.

	Semicolon ;
	-----------
	The semicolon ; metacharacter is used to separate multiple commands on a single command line. When multiple commands are separated by a semicolon, they are executed sequentially in the order they appear on the command line.
		$ echo "Hello, "; echo "world!"
		Hello,
		world!

	As you can see from the example above, the output of each echo command is printed on separate lines and follows the same sequence in which the commands were specified.

	The semicolon metacharacter is useful when you need to run multiple commands sequentially on a single command line.

	Asterisk *:
	-----------
	The asterisk * metacharacter is used as a wildcard character to represent any sequence of characters, including none.
		ls *.txt
	In this example, *.txt is a wildcard pattern that matches any file in the current directory with a .txt extension. The ls command lists the names of all matching files.

	Question mark ?:
	----------------
	The question mark ? metacharacter is used as a wildcard character to represent any single character.
		ls file?.txt
	In this example, file?.txt is a wildcard pattern that matches any file in the current directory with a name starting with file, followed by any single character, and ending with the .txt extension.

	Quoting:
	--------
	Quoting is a mechanism that allows you to remove the special meaning of characters, spaces, or other metacharacters in a command argument or shell script. You use quoting when you want the shell to interpret characters literally.

	Symbol	Meaning
	\	Escape metacharacter interpretation
	" "	Interpret metacharacters within string
	' '	Escape all metacharacters within string
	
	Backslash \:
	-------------
	The backslash character is used as an escape character. It instructs the shell to preserve the literal interpretation of special characters such as space, tab, and $. For example, if you have a file with spaces in its name, you can use backslashes followed by a space to handle those spaces literally:


	touch file\ with\ space.txt

Double quotes " ":
-------------------
	When a string is enclosed in double quotes, most characters are interpreted literally, but metacharacters are interpreted according to their special meaning. For example, you can access variable values using the dollar 
		$ echo "Hello $USER"
		Hello <username>

Single quotes ' ':
------------------
	When a string is enclosed in single quotes, all characters and metacharacters enclosed within the quotes are interpreted literally. Single quotes alter the above example to produce the following output:
		$ echo 'Hello $USER'
		Hello $USER
	Notice that instead of printing the value of $USER, single quotes cause the terminal to print the string "$USER".

Input/Output redirection:
--------------------------
		Symbol	Meaning
		>	Redirect output to file, overwrite
		>>	Redirect output to file, append
		2>	Redirect standard error to file, overwrite
		2>>	Redirect standard error to file, append
		<	Redirect file contents to standard input
	Input/output (IO) redirection is the process of directing the flow of data between a program and its input/output sources.
	By default, a program reads input from standard input, the keyboard, and writes output to standard output, the terminal. However, using IO redirection, you can redirect a program's input or output to or from a file or another program.
	
Redirect output >:
------------------
	This symbol is used to redirect the standard output of a command to a specified file.

	ls > files.txt will create a file called files.txt if it doesn't exist, and write the output of the ls command to it.

	Warning: When the file already exists, the output overwrites all of the file's contents!

Redirect and append output >>:
------------------------------
	This notation is used to redirect and append the output of a command to the end of a file. For example,

	ls >> files.txt appends the output of the ls command to the end of file files.txt, and preserves any content that already existed in the file.

Redirect standard output 2>:
----------------------------
	This notation is used to redirect the standard error output of a command to a file. For example, if you run the ls command on a non-existing directory as follows,

	ls non-existent-directory 2> error.txt the shell will create a file called error.txt if it doesn't exist, and redirect the error output of the ls command to the file.

	Warning: When the file already exists, the error message overwrites all of the file's contents!

Append standard error 2>>:
--------------------------
	This symbol redirects the standard error output of a command and appends the error message to the end of a file without overwriting its contents.

	ls non-existent-directory 2>> error.txt will append the error output of the ls command to the end of the error.txt file.

Redirect input <:
-----------------
	This symbol is used to redirect the standard input of a command from a file or another command. For example,

	sort < data.txt will sort the contents of the data.txt file.

Command Substitution:
---------------------
	Command substitution allows you to run command and use its output as a component of another command's argument. Command substitution is denoted by enclosing a command in either backticks (`command`) or using the $() syntax. When the encapsulate command is executed, its output is substituted in place, and it can be used as an argument within another command. This is particularly useful for automating tasks that require the use of a command's output as input for another command.

	For example, you could store the path to your current directory in a variable by applying command substitution on the pwd command, then move to another directory, and finally return to your original directory by invoking the cd command on the variable you stored, as follows:
		$ here=$(pwd)
		$ cd path_to_some_other_directory
		$ cd $here

Command Line Arguments:
-----------------------
	Command line arguments are additional inputs that can be passed to a program when the program is run from a command line interface. These arguments are specified after the name of the program, and they can be used to modify the behavior of the program, provide input data, or provide output locations. Command line arguments are used to pass arguments to a shell script.

	For example, the following command provides two arguments, arg1, and arg2, that can be accessed from within your Bash script:
	
	$ ./MyBashScript.sh arg1 arg2

Summary:
--------
	In this reading, you learned that:

	Metacharacters such as #, ;, *, and ? are characters that the shell interprets with special meanings
	Quoting allows you to ensure any special characters, spaces, or other metacharacters are interpreted literally by the shell
	Input/output redirection redirects a program's input or output to/from a file
	Command substitution allows you to use the output of a command as an argument for another command
	Command line arguments can be used to pass information to a shell script

	curl https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBM-LX0117EN-SkillsNetwork/labs/M3/L2/arrays_table.csv